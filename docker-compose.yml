services:
  db:
    image: postgres:16
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./db_backup.sql:/docker-entrypoint-initdb.d/db_backup.sql  # монтируем дамп
    ports:
      - "${DB_PORT}:${DB_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
  django:
    build: ./movies_admin
    # Порт, с которого сервис будет доступен на локальной машине
    env_file:
      - .env
    volumes:
      - static_volume:/opt/app/staticfiles
    ports:
      - "8000:8000"
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}

  nginx:
    image: nginx:1.25.3
    volumes:
      - ./src/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./src/conf.d:/etc/nginx/conf.d:ro
      - static_volume:/opt/app/staticfiles
    depends_on:
      - django
    ports:
      - "80:80"

  elasticsearch:
    image: elasticsearch:8.6.2
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 5

  etl:
    build:
      context: .
      dockerfile: Dockerfile.etl
    env_file:
      - .env
    environment:
      - ELASTIC_HOST=${ELASTIC_HOST}
      - ELASTIC_PORT=${ELASTIC_PORT}
      - ELASTIC_SCHEME=${ELASTIC_SCHEME}
    depends_on:
      db:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    restart: unless-stopped
volumes:
  static_volume:
  postgres_data:
  elastic_data: